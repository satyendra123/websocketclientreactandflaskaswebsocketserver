# flask as a websocket server
from flask import Flask
from flask_socketio import SocketIO, emit
from flask_cors import CORS
from threading import Thread, Event
import random
import time
import logging
from datetime import datetime

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode='eventlet', cors_allowed_origins="*")

thread = Thread()
thread_stop_event = Event()
thread_running = False

# Configure logging
logging.basicConfig(level=logging.INFO)

def generate_sensor_data():
    while not thread_stop_event.is_set():
        temperature = round(random.uniform(20.0, 30.0), 2)
        humidity = round(random.uniform(30.0, 60.0), 2)
        pressure = round(random.uniform(900.0, 1100.0), 2)
        data = {
            'temperature': temperature,
            'humidity': humidity,
            'pressure': pressure
        }
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        logging.info(f"Data sent at {timestamp}: {data}")
        socketio.emit('sensor_data', data)
        time.sleep(2)

@app.route('/')
def index():
    return "WebSocket server is running."

@socketio.on('connect')
def handle_connect():
    global thread
    global thread_running
    if not thread_running:
        thread_stop_event.clear()
        thread = Thread(target=generate_sensor_data)
        thread.start()
        thread_running = True

@socketio.on('disconnect')
def handle_disconnect():
    global thread_stop_event
    global thread_running
    thread_stop_event.set()
    thread_running = False

if __name__ == '__main__':
    host = '0.0.0.0'
    port = 5000
    logging.info(f"WebSocket server is running on {host}:{port}")
    socketio.run(app, host=host, port=port)


#EX-2 react js as a websocket client
import React, { useEffect, useState, useRef } from 'react';
import './App.css';
import io from 'socket.io-client';

function App() {
  const [temperature, setTemperature] = useState('');
  const [humidity, setHumidity] = useState('');
  const [pressure, setPressure] = useState('');
  const gateway = `http://${window.location.hostname}:5000`; // Adjust the port as needed
  const socket = useRef(null);

  const initSocket = () => {
    console.log('Trying to open a WebSocket connectionâ€¦');
    socket.current = io(gateway);
    socket.current.on('connect', onOpen);
    socket.current.on('disconnect', onClose);
    socket.current.on('sensor_data', onMessage);
  };

  useEffect(() => {
    initSocket();

    return () => {
      if (socket.current) {
        socket.current.disconnect();
      }
    };
  }, []); // No dependencies to avoid the warning

  const onOpen = () => {
    console.log('Connection opened');
  };

  const onClose = () => {
    console.log('Connection closed');
  };

  const onMessage = (data) => {
    console.log('Received sensor data:', data);
    if (data && typeof data === 'object') {
      alert(data.humidity)   
      setTemperature(data.temperature);
      setHumidity(data.humidity);
      setPressure(data.pressure);
    }
  };

  return (
    <div className="App">
      <div className="topnav">
        <h1>SENSOR READINGS (WEBSOCKET)</h1>
      </div>
      <div className="content">
        <div className="card-grid">
          <div className="card">
            <p className="card-title">
              <i className="fas fa-thermometer-threequarters" style={{ color: '#059e8a' }}></i> Temperature
            </p>
            <p className="reading">
              <span id="temperature">{temperature}</span> &deg;C
            </p>
          </div>
          <div className="card">
            <p className="card-title"> Humidity</p>
            <p className="reading">
              <span id="humidity">{humidity}</span> &percnt;
            </p>
          </div>
          <div className="card">
            <p className="card-title"> Pressure</p>
            <p className="reading">
              <span id="pressure">{pressure}</span> hPa
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;

#STEP-3 App.css
html {
  font-family: Arial, Helvetica, sans-serif;
  display: inline-block;
  text-align: center;
}

h1 {
  font-size: 1.8rem;
  color: white;
}

.topnav {
  overflow: hidden;
  background-color: #0a1128;
}

body {
  margin: 0;
}

.content {
  padding: 50px;
}

.card-grid {
  max-width: 800px;
  margin: 0 auto;
  display: grid;
  grid-gap: 2rem;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.card {
  background-color: white;
  box-shadow: 2px 2px 12px 1px rgba(140, 140, 140, 0.5);
}

.card-title {
  font-size: 1.2rem;
  font-weight: bold;
  color: #034078;
}

.reading {
  font-size: 1.2rem;
  color: #1282a2;
}

#EX-4 esp32 works as a websocketserver
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <ArduinoJson.h>

const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

void onEvent(AsyncWebSocket * server, AsyncWebSocketClient * client, AwsEventType type, void * arg, uint8_t *data, size_t len) {
  if (type == WS_EVT_CONNECT) {
    Serial.println("WebSocket client connected");
  } else if (type == WS_EVT_DISCONNECT) {
    Serial.println("WebSocket client disconnected");
  }
}

void sendSensorData() {
  StaticJsonDocument<200> doc;
  doc["temperature"] = random(200, 300) / 10.0;
  doc["humidity"] = random(300, 600) / 10.0;
  doc["pressure"] = random(9000, 11000) / 10.0;

  char jsonBuffer[512];
  size_t n = serializeJson(doc, jsonBuffer);

  ws.textAll(jsonBuffer, n);
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");

  ws.onEvent(onEvent);
  server.addHandler(&ws);

  server.begin();

  // Send data every 2 seconds
  xTaskCreate([](void *){
    for(;;){
      sendSensorData();
      vTaskDelay(2000 / portTICK_PERIOD_MS);
    }
  }, "SendSensorData", 4096, NULL, 1, NULL);
}

void loop() {
  // Nothing to do here, everything is handled in the task
}

#STEP-5 esp32 as a websocketserver micropython code
from microdot_asyncio import Microdot, Response
from microdot_asyncio_websocket import with_websocket
import uasyncio as asyncio
import random

app = Microdot()
Response.default_content_type = 'application/json'

clients = []

async def generate_sensor_data():
    while True:
        temperature = round(random.uniform(20.0, 30.0), 2)
        humidity = round(random.uniform(30.0, 60.0), 2)
        pressure = round(random.uniform(900.0, 1100.0), 2)
        data = {
            'temperature': temperature,
            'humidity': humidity,
            'pressure': pressure
        }
        for ws in clients:
            await ws.send(json.dumps(data))
        await asyncio.sleep(2)

@app.route('/ws')
@with_websocket
async def websocket(ws):
    clients.append(ws)
    try:
        while True:
            msg = await ws.receive()
    except:
        clients.remove(ws)

async def main():
    asyncio.create_task(generate_sensor_data())
    await app.start_server(port=5000)

asyncio.run(main())

